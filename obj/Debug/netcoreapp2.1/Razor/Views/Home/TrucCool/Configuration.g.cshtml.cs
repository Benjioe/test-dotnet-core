#pragma checksum "C:\Users\benja\source\repos\test-dotnet-core\Views\Home\TrucCool\Configuration.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "38b259927f5e40a24ff88560f574814e3bfdd916"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_TrucCool_Configuration), @"mvc.1.0.view", @"/Views/Home/TrucCool/Configuration.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/TrucCool/Configuration.cshtml", typeof(AspNetCore.Views_Home_TrucCool_Configuration))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\benja\source\repos\test-dotnet-core\Views\_ViewImports.cshtml"
using test_dotnet_core;

#line default
#line hidden
#line 2 "C:\Users\benja\source\repos\test-dotnet-core\Views\_ViewImports.cshtml"
using test_dotnet_core.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"38b259927f5e40a24ff88560f574814e3bfdd916", @"/Views/Home/TrucCool/Configuration.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"431c47704a82aa6d5a95f8852b7b3d38cd0d05df", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_TrucCool_Configuration : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 846, true);
            WriteLiteral(@"<h3>Configuration</h3>
<p>
    Il est possible d'ajouter son propre système de configuration qui va demander le recyclage du pool de l'application si celle-ci est modifié.<br />
    Pou celà, on commance par télécherger le paquet nuget <strong>Microsoft.Extensions.Configuration</strong>.<br />
    Puis dans le fichier Program.cs, méthode CreateWebHostBuilder on ajoute l'appel de la méthode ConfigureAppConfiguration.
    
</p>

<code>
    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =><br />
    WebHost.CreateDefaultBuilder(args)<br />
    <span class=""code-modifie"">.ConfigureAppConfiguration((context, builder) =><br />
    {<br />
    builder.AddJsonFile(""ListTrucCool.json"", optional: false, reloadOnChange: false);<br />
    })<br /></span>
    .UseStartup&&lt;Startup&&gt;();<br />
    
 </code>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
